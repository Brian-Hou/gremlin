[{"/Users/Gabe/Code/gremlin/src/index.js":"1","/Users/Gabe/Code/gremlin/src/App.js":"2","/Users/Gabe/Code/gremlin/src/reportWebVitals.js":"3","/Users/Gabe/Code/gremlin/src/components/Splash.js":"4","/Users/Gabe/Code/gremlin/src/helpers/sendPayment.js":"5","/Users/Gabe/Code/gremlin/src/components/Playground.js":"6","/Users/Gabe/Code/gremlin/src/helpers/issueAsset.js":"7"},{"size":574,"mtime":1612112336297,"results":"8","hashOfConfig":"9"},{"size":203,"mtime":1612111680113,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1612058303555,"results":"12","hashOfConfig":"9"},{"size":5449,"mtime":1612137122335,"results":"13","hashOfConfig":"9"},{"size":2141,"mtime":1612118161400,"results":"14","hashOfConfig":"9"},{"size":4726,"mtime":1612119304232,"results":"15","hashOfConfig":"9"},{"size":3386,"mtime":1612119272512,"results":"16","hashOfConfig":"9"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1087je7",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"22"},"1sd6lw2",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},"/Users/Gabe/Code/gremlin/src/index.js",[],"/Users/Gabe/Code/gremlin/src/App.js",["36"],"import logo from './logo.svg';\nimport './App.css';\nimport Splash from './components/Splash';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Splash/>\n    </div>\n  );\n}\n\nexport default App;\n",["37","38"],"/Users/Gabe/Code/gremlin/src/reportWebVitals.js",[],"/Users/Gabe/Code/gremlin/src/components/Splash.js",["39"],"/Users/Gabe/Code/gremlin/src/helpers/sendPayment.js",["40"],"const StellarSdk = require(\"stellar-sdk\");\nconst fetch = require(\"node-fetch\");\n\nconst server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\n\nconst TARGET = process.env.REACT_APP_PUBLIC;\nconst SOURCE = process.env.REACT_APP_PUBLIC2;\nconst SOURCE_SECRET = process.env.REACT_APP_SECRET2;\n\nasync function sendPayment() {\n    return new Promise(async (resolve, reject) => {\n        const sourceKeypair = StellarSdk.Keypair.fromSecret(\n            SOURCE_SECRET\n        );\n        const destination =\n            TARGET;\n        const amount = \"100\";\n\n        console.log(\n            `Making a new test account and sending ${amount} lumens to ${destination}`,\n        );\n\n        const [\n            {\n                max_fee: { mode: fee },\n            },\n            sender,\n        ] = await Promise.all([\n            server.feeStats(),\n            server.loadAccount(SOURCE),\n        ]);\n\n        console.log('after', sender)\n\n        const transaction = new StellarSdk.TransactionBuilder(sender, {\n            fee,\n            networkPassphrase: StellarSdk.Networks.TESTNET,\n        })\n            .addOperation(\n                // This operation sends the destination account XLM\n                StellarSdk.Operation.payment({\n                    destination,\n                    asset: StellarSdk.Asset.native(),\n                    amount,\n                }),\n            )\n            .setTimeout(30)\n            .build();\n        transaction.sign(sourceKeypair);\n\n        try {\n            // Submit the transaction to the Stellar network.\n            const transactionResult = await server.submitTransaction(transaction);\n            console.log(transactionResult);\n            console.log('FINAL');\n\n            return resolve(`Success! ${SOURCE} paid ${TARGET} ${amount} XLM`);\n        } catch (e) {\n            console.error(\"Oh no! Something went wrong.\");\n            console.error(e.response.data.detail);\n            console.error(e.response.data.extras.result_codes);\n            console.error(e.response.data.type);\n            return reject(e.response.data);\n        }\n    });\n}\n\nexport default sendPayment;","/Users/Gabe/Code/gremlin/src/components/Playground.js",["41"],"import React, {Component,Fragment} from 'react';\nimport {Container,Navbar,Row,Col,Image,Nav,Button,Spinner,Alert} from \"react-bootstrap\";\nimport './styles/splash.css';\n\nimport logo from '../assets/logo.png';\nimport sendPayment from \"../helpers/sendPayment\";\nimport issueAsset from \"../helpers/issueAsset\";\nclass Playground extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            response: null,\n            response_asset: null,\n            loading_asset: false,\n        };\n        this.sendTestPayment = async () => {\n            this.setState({loading:true});\n            let response = await sendPayment();\n            this.setState({response,loading:false});\n        };\n        this.issueTestAsset = async () => {\n            this.setState({loading_asset:true});\n            let response_asset = await issueAsset();\n            this.setState({response_asset,loading_asset:false});\n        }\n    }\n\n    render () {\n        const {loading,response,loading_asset,response_asset} = this.state;\n        return (\n            <div>\n                <Navbar bg=\"dark\" expand={'lg'} variant=\"dark\">\n                    <Navbar.Brand href=\"#home\">\n                        <img\n                            alt=\"\"\n                            src={logo}\n                            width=\"30\"\n                            height=\"30\"\n                            className=\"d-inline-block align-top\"\n                        />{' '}\n                        Gremlin\n                    </Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <div className={'w-100 d-block text-right mr-5'}>\n                            <Nav.Link className={'d-inline-block'} href=\"#whitepaper\"><strong>Whitepaper</strong></Nav.Link>\n                            <Nav.Link className={'d-inline-block'} href=\"#contact\"><strong>Contact</strong></Nav.Link>\n                            <Nav.Link className={'d-inline-block'} href=\"#risks\"><strong>Risks</strong></Nav.Link>\n                        </div>\n                    </Navbar.Collapse>\n                </Navbar>\n\n                <Container style={{minHeight: '100vh'}}>\n                    {response && <Alert className={'mt-5'} onClose={() => {\n                        this.setState({response: null})\n                    }} variant={'success'} dismissible>{response}</Alert>}\n                    <Row className={'my-5'}>\n                        <Col>\n                            <h2 className={'mb-3'}>Payments (XLM)</h2>\n                            {loading ?\n                                <Fragment><Spinner animation={'border'} /><p>Please wait while we process your payment</p></Fragment>\n                                :\n                                <Button onClick={() => {\n                                    this.sendTestPayment();\n                                }}>Send Test Payment</Button>\n                            }\n                        </Col>\n                    </Row>\n                    <hr/>\n                    {response_asset && <Alert className={'mt-5'} onClose={() => {\n                        this.setState({response_asset: null})\n                    }} variant={'success'} dismissible>{response_asset}</Alert>}\n                    <Row className={'mt-5'}>\n                        <Col>\n                            <h2 className={'mb-3'}>Issuing Assets (GameStonk)</h2>\n                            {loading_asset ?\n                                <Fragment><Spinner animation={'border'} /><p>Please wait while we process your payment</p></Fragment>\n                                :\n                                <Button onClick={() => {\n                                    this.issueTestAsset();\n                                }}>Issue Test Asset</Button>\n                            }\n                        </Col>\n                    </Row>\n                </Container>\n\n\n                <Navbar bg=\"dark\" variant=\"dark\">\n                    <Navbar.Brand href=\"#home\">\n                        YSL Â© 2021\n                    </Navbar.Brand>\n                    <div className={'w-100 d-block text-center mr-5'}>\n                        <Nav.Link className={'d-inline-block'} href=\"#whitepaper\"><strong>Privacy</strong></Nav.Link>\n                        <Nav.Link className={'d-inline-block'} href=\"#contact\"><strong>Terms</strong></Nav.Link>\n                        <Nav.Link className={'d-inline-block'} href=\"#risks\"><strong>Legal</strong></Nav.Link>\n                    </div>\n                </Navbar>\n            </div>\n        )\n    }\n}\n\nexport default Playground;","/Users/Gabe/Code/gremlin/src/helpers/issueAsset.js",["42","43","44"],"const StellarSdk = require(\"stellar-sdk\");\nconst fetch = require(\"node-fetch\");\n\nconst server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\n\nconst ISSUER = process.env.REACT_APP_PUBLIC;\nconst ISSUER_SECRET = process.env.REACT_APP_SECRET;\nconst DIST = process.env.REACT_APP_PUBLIC2;\nconst DIST_SECRET = process.env.REACT_APP_SECRET2;\n\n// Keys for accounts to issue and receive the new asset.\nconst issuingKeypair = StellarSdk.Keypair.fromSecret(\n    ISSUER_SECRET,\n);\nconst distributionKeypair = StellarSdk.Keypair.fromSecret(\n    DIST_SECRET,\n);\nconst availableCurrency = \"1000\";\nconst distributedCurrency = \"100\";\n\n// Create an Asset object that represents the asset to be created.\nconst gil = new StellarSdk.Asset(\n    \"Gamestonk\",\n    issuingKeypair.publicKey(),\n);\n\nasync function issueAsset() {\n    return new Promise(async (resolve, reject) => {\n        try {\n            // Fetch the base fee and the account that will create our transaction\n            const [\n                {\n                    max_fee: { mode: fee },\n                },\n                distributionAccount,\n            ] = await Promise.all([\n                server.feeStats(),\n                server.loadAccount(distributionKeypair.publicKey()),\n            ]);\n\n            const changeTrustTx = new StellarSdk.TransactionBuilder(\n                distributionAccount,\n                {\n                    fee,\n                    networkPassphrase: StellarSdk.Networks.TESTNET,\n                },\n            )\n                .addOperation(\n                    // The `changeTrust` operation creates (or alters) a trustline.\n                    StellarSdk.Operation.changeTrust({\n                        asset: gil,\n                        limit: availableCurrency,\n                    }),\n                )\n                .addOperation(\n                    // One transaction can have operations from different accounts,\n                    // they just need to be signed by each account.\n                    StellarSdk.Operation.payment({\n                        destination: distributionKeypair.publicKey(),\n                        asset: gil,\n                        amount: \"50\",\n                        source: issuingKeypair.publicKey(),\n                    }),\n                )\n                .setTimeout(100)\n                .build();\n            changeTrustTx.sign(distributionKeypair);\n            changeTrustTx.sign(issuingKeypair);\n\n            console.log(\n                `Making trustline and issuing ${distributedCurrency} Gamestonkâ¦`,\n            );\n            const txResult = await server.submitTransaction(changeTrustTx);\n\n            console.log(\n                `Success! ${\n                    issuingKeypair.publicKey()} issued ${distributedCurrency} Gamestonk to ${distributionKeypair.publicKey()}`,\n            );\n            console.log(txResult);\n            return resolve(`Success! ${\n                issuingKeypair.publicKey()} issued ${distributedCurrency} Gamestonk to ${distributionKeypair.publicKey()}`)\n        } catch (e) {\n            console.error(\"Oh no! Something went wrong.\");\n            console.error(e.response.data.detail);\n            console.error(e.response.data.extras.result_codes);\n            console.error(e.response.data.type);\n            return reject( e.response.data);\n        }\n    });\n}\n\nexport default issueAsset;\n",{"ruleId":"45","severity":1,"message":"46","line":1,"column":8,"nodeType":"47","messageId":"48","endLine":1,"endColumn":12},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":8,"column":5,"nodeType":"55","messageId":"56","endLine":10,"endColumn":6},{"ruleId":"45","severity":1,"message":"57","line":2,"column":7,"nodeType":"47","messageId":"48","endLine":2,"endColumn":12},{"ruleId":"45","severity":1,"message":"58","line":2,"column":34,"nodeType":"47","messageId":"48","endLine":2,"endColumn":39},{"ruleId":"45","severity":1,"message":"57","line":2,"column":7,"nodeType":"47","messageId":"48","endLine":2,"endColumn":12},{"ruleId":"45","severity":1,"message":"59","line":6,"column":7,"nodeType":"47","messageId":"48","endLine":6,"endColumn":13},{"ruleId":"45","severity":1,"message":"60","line":8,"column":7,"nodeType":"47","messageId":"48","endLine":8,"endColumn":11},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'fetch' is assigned a value but never used.","'Image' is defined but never used.","'ISSUER' is assigned a value but never used.","'DIST' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]